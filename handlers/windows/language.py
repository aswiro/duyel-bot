from aiogram.types import CallbackQuery
from aiogram_dialog import DialogManager, ShowMode, Window
from aiogram_dialog.widgets.kbd import Column, Radio
from aiogram_dialog.widgets.text import Format
from loguru import logger

from configs import LOCALES_DIR
from database.unit_of_work import UnitOfWork

from ..states import DuelSG
from ..widgets import BaseDialogWidgets

# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–¥–æ–≤ —è–∑—ã–∫–æ–≤ –∏ –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
language_display = {
    "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
    "en": "üá∫üá∏ English",
    "de": "üá©üá™ Deutsch",
    "fr": "üá´üá∑ Fran√ßais",
    "es": "üá™üá∏ Espa√±ol",
    "it": "üáÆüáπ Italiano",
    "pt": "üáµüáπ Portugu√™s",
    "zh": "üá®üá≥ ‰∏≠Êñá",
    "ja": "üáØüáµ Êó•Êú¨Ë™û",
    "ko": "üá∞üá∑ ÌïúÍµ≠Ïñ¥",
    "ar": "üá∏üá¶ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©",
    "hi": "üáÆüá≥ ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä",
    "tr": "üáπüá∑ T√ºrk√ße",
    "pl": "üáµüá± Polski",
    "nl": "üá≥üá± Nederlands",
    "sv": "üá∏üá™ Svenska",
    "da": "üá©üá∞ Dansk",
    "no": "üá≥üá¥ Norsk",
    "fi": "üá´üáÆ Suomi",
    "cs": "üá®üáø ƒåe≈°tina",
    "sk": "üá∏üá∞ Slovenƒçina",
    "hu": "üá≠üá∫ Magyar",
    "ro": "üá∑üá¥ Rom√¢nƒÉ",
    "bg": "üáßüá¨ –ë—ä–ª–≥–∞—Ä—Å–∫–∏",
    "hr": "üá≠üá∑ Hrvatski",
    "sr": "üá∑üá∏ –°—Ä–ø—Å–∫–∏",
    "sl": "üá∏üáÆ Sloven≈°ƒçina",
    "et": "üá™üá™ Eesti",
    "lv": "üá±üáª Latvie≈°u",
    "lt": "üá±üáπ Lietuvi≈≥",
    "uk": "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
    "be": "üáßüáæ –ë–µ–ª–∞—Ä—É—Å–∫–∞—è",
}


def get_available_languages() -> list[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–∫–∞–ª–µ–π."""
    available_languages = []
    if LOCALES_DIR.exists():
        for item in LOCALES_DIR.iterdir():
            if item.is_dir() and item.name != "__pycache__":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .ftl —Ñ–∞–π–ª–æ–≤ –¥–ª—è Fluent –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
                ftl_files = list(item.glob("*.ftl"))
                if ftl_files:
                    available_languages.append(item.name)
    available_languages.sort()
    return available_languages


async def get_language_data(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —è–∑—ã–∫–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞."""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    uow = dialog_manager.middleware_data["uow"]
    user_id = dialog_manager.event.from_user.id
    current_language = "ru"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    async with uow:
        user = await uow.user_service.get_user(user_id)
        if user and user.language_code:
            current_language = user.language_code

    l10n = dialog_manager.middleware_data["l10n"]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —è–∑—ã–∫–æ–≤
    radio_widget, languages_data = create_language_radio()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ Radio
    radio_managed = dialog_manager.find("language_radio")
    if radio_managed and current_language:
        await radio_managed.set_checked(current_language)

    return {
        "languages": languages_data,
        "current_language": current_language,
        "l10n_choose_language": l10n.format_value("choose-language"),
        "l10n_back": l10n.format_value("back-to-menu"),
    }


async def on_language_radio_changed(
    callback: CallbackQuery,
    radio,
    dialog_manager: DialogManager,
    item_id: str,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ —è–∑—ã–∫–∞."""
    # –ü–æ–ª—É—á–∞–µ–º l10n –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    l10n = dialog_manager.middleware_data["l10n"]

    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer(l10n.format_value("language-changed"))

    selected_lang = radio.get_checked()

    if selected_lang:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        uow: UnitOfWork = dialog_manager.middleware_data["uow"]
        l10n = dialog_manager.middleware_data["l10n"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with uow:
            await uow.user_service.update_user(
                user_id, {"language_code": selected_lang}
            )
            await uow.session.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –≤ L10n
        l10n.current_locale = selected_lang

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª —è–∑—ã–∫ –Ω–∞ {selected_lang}")

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –Ω–æ–≤–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
        await dialog_manager.switch_to(
            DuelSG.language_menu,
            show_mode=ShowMode.EDIT,
        )


def create_language_radio():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
    available_languages = get_available_languages()
    languages_data = []

    for lang_code in available_languages:
        display_name = language_display.get(lang_code, f"üåê {lang_code.upper()}")
        languages_data.append((display_name, lang_code))

    return Radio(
        Format("‚úÖ  {item[0]}"),  # –û—Ç–º–µ—á–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        Format("{item[0]}"),  # –ù–µ–æ—Ç–º–µ—á–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        id="language_radio",
        item_id_getter=lambda item: item[1],
        items="languages",
        on_state_changed=on_language_radio_changed,
    ), languages_data


# –ú–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
language_window = Window(
    Format("{l10n_choose_language}"),
    Column(
        create_language_radio()[0],  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ Radio –≤–∏–¥–∂–µ—Ç
    ),
    BaseDialogWidgets.back_button(DuelSG.main_menu),
    state=DuelSG.language_menu,
    getter=get_language_data,
)
